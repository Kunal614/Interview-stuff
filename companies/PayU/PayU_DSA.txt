



Q1.


RCA over GCP env key


Find all pairs in the integer array that adds up to the given target value.

Input ->  Arr [1, 2, 4, -10, 8, 12, 14 ], target = 16

Output -> [ [2, 14], [4, 12] ]

-10 1 2 4 8 12 14

Left = -10
Right = 14

Left++

Left = 1
Right = 14

Left++

Left = 2
Right = 14

Left++

Left = 4
Right = 14

Right--


Target - Arr[i]





Int numberOfResults(vector<int> arr) {
	unordered_map<int, int> mp(arr.size());
	vector<int, int> ans;

	for(auto i: arr) {
		mp[arr[i]]++;
	}
	for(auto i: mp) {
		if(mp[target-arr[i]] != mp.end()) {
			ans.push_back(arr[i], target-arr[i]);	
		}
	}

	Return ans;
}

SC = O(2*n)
TC = O(n)




















Q2. Given an array of meeting time intervals “intervals” where “intervals[i] = [ start[i], end[i] ]”, return the minimum number of conference rooms required.

intervals = [[0,30],[5,10],[15,20]], output - 2

intervals = [[7,10],[2,4]], output - 1

0 30
5 10
15 20

15

0                           30
     5 10    15  20


20
30


Bool comparator(vector<int> a, vector<int> b) {
 	if(a[0] < b[0]) {
		Return true;
	}
	Return false;
}



Int intervals(vector<int><int> arr) {
	Int size = arr.size())
	sort(arr, arr + size, comparator);
	
	priority_queue<int, vector<int>, greater<<int>> pq;
	pq.push(arr[0][1]);
	
	for(int i=1; i<size; i++) {
		if(  arr[i][0] < pq.top() ) {
			pq.push(arr[i][1]);
		}
Else {
pq.pop();
pq.push(arr[i][1]);	
		}
}
Return pq.size();
}



SC - O(n)
TC - O(nlogn)



Q3.

Employee
Id | Name | salary | managerId
1    abc       100        99
2
.
.
.
99     xyz        90       101

Write a query to find all employees who earn more than their manager ?

Select *
From employee worker, employee manager where worker.managerId = manager.Id and worker.salary > manager.salary;

